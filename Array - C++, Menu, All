#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

class Array{
	private:
		int *A;
		int size;
		int lenght;	
		
		void swap(int *x, int *y);
	public:
		
		Array(){
			size  = 10;
			lenght = 0;
			A = new int[size];
		}
		
		Array(int sz){
			size  = sz;
			lenght = 0;
			A = new int[size];
		}
		
		//Array(){
		//delete []A;
		//}
		
	void display();
	void append(int x);
	void insert(int index, int x);
	void Delete(int index);
	
	int Get(int index);
	void Set(int index, int x);
	
	int Max();
	int Min();
	int Sum();
	float Avg();
	
	int linearsearch(int key);
	int binarysearch(int key);
	int recbinsearch(int a[], int l,int h, int key);
	
	void Reverse();
	void Reverse2();
	
	void InsertSort(int x);
	int isSorted();
	void Rearrange();
	
	Array* Merge(Array *arr2);
	Array* Union(Array *arr2);
	Array* Intersection(Array *arr2);
	Array* Difference(Array *arr2);
	
	

};

void Array::display(){
	cout<<"The elements are: "<<endl;
	for(int i=0; i<lenght; i++){
		cout<<A[i]<<" ";
	}
	cout<<endl<<endl;
}

void Array::append(int x){
	if(lenght < size){
		A[lenght++] = x;
	}
}

void Array::insert(int index, int x){
	if(index>=0 && index<= lenght){
		for(int i=lenght; i>index; i--){
			A[i] = A[i-1];
		}
		A[index] = x;
		lenght++;
	}
}

void Array::Delete(int index){
	if(index>=0 && index< lenght){
		for(int i=index; i<lenght-1; i++){
			A[i] = A[i+1];
		}
		lenght--;
	}
}

int Array::Get(int index){
	if(index>=0 && index<lenght){
		return A[index];
	}
	return -1;
}

void Array::Set(int index, int x){
	if(index>=0 && index<lenght){
		A[index] = x;
	}

}

int Array::Max(){
	int max = A[0];
	for(int i=0; i<lenght;i++){
		if(A[i]>max){
			max = A[i];
		}
	}
	return max;
}

int Array::Min(){
	int min = A[0];
	for(int i=0; i<lenght;i++){
		if(A[i]<min){
			min = A[i];
		}
	}
	return min;
}

int Array::Sum(){
	int s = 0;
	for(int i=0; i<lenght;i++){
		s = s + A[i];
	}
	return s;
}

float Array::Avg(){
	return Sum()/lenght;
}

void Array::swap(int *x, int *y){
	int temp = *x;
	*x = *y;
	*y = temp;
}

int Array::linearsearch(int key){
	for (int i=0;i<lenght;i++){
		if(key==A[i]){
			swap(&A[i],&A[i-1]);     //Transposition
			//swap(&A[i],&A[0]);     //Move to head/front
			return i;
		}
	}
	return -1;
}

int Array::binarysearch(int key){
	int l = 0;
	int mid;
	int h = lenght-1;

	while(l<=h){
		mid = (l+h)/2;
		if(key==A[mid]){
			return mid;
		}
		else if(key<A[mid]){
			h = mid-1;
		}
		else{
			l = mid+1;
		}
	}
	return -1;
}

void Array::Reverse(){
	int *B;
	B = new int[lenght];
	int i,j;
	for(i=lenght-1,j=0; i>=0; i--,j++){
		B[j] = A[i];
	}

	for(int i=0;i<lenght;i++){
		A[i] = B[i];
	}
}

void Array::Reverse2(){
	for(int i=0,j=lenght-1; i<j; i++,j--){
		swap(&A[i], &A[j]);
	}
}

void Array::InsertSort(int x){
	int i = lenght-1;
	if(lenght==size){
		return;
	}
	while(i>=0 && A[i]>x){
		A[i+1] = A[i];
		i--;
	}
	A[i+1] = x;
	lenght++;
}

int Array::isSorted(){
	for (int i=0; i<lenght-1; i++){
		if(A[i]>A[i+1]){
			return 0;                    // 0 means array is not sorted.
		} 								 
	}
	return 1;                            // 1 means array is sorted.
}

int Array::recbinsearch(int a[], int l,int h, int key){
	int mid;

	if(l<=h){
		mid  = (l+h)/2;
		if(key==a[mid]){
			return mid;
		}
		else if(key<a[mid]){
			return recbinsearch(a, l, mid-1, key);
		}
		else{
			return recbinsearch(a, mid+1, h, key);
		}
	}
}

void Array::Rearrange(){
	int i = 0;
	int j = lenght-1;

	while(i<j){
		while(A[i]<0){i++;}
		while(A[j]>0){j--;}
		if(i<j){
			swap(&A[i],&A[j]);
		}
	}
}

Array* Merge(Array *arr2){
	int i = 0;
	int j = 0;
	int k = 0;
	
	Array *arr3 = new Array(lenght+arr2.lenght);  //struct Array *arr3 = (struct Array *)malloc(sizeof(struct Array));
	
	while(i<lenght && j<arr2.lenght){
		if(A[i] < arr2.A[j]){
			arr3->A[k++] = A[i++];
		}
		else{
			arr3->A[k++] = arr2.A[j++];
		}
	}
	
	for(; i<lenght; i++){
		arr3->A[k++] = A[i];
	}
	for(; j<arr2.lenght; j++){
		arr3->A[k++] = arr2.A[j];
	}
	
	arr3->lenght = lenght + arr2.lenght;
	
	
	return arr3;
}

Array* Union(Array *arr2){
	int i = 0;
	int j = 0;
	int k = 0;
	
	Array *arr3 = new Array(lenght+arr2.lenght);
	
	while(i<lenght && j<arr2.lenght){
		if(A[i] < arr2.A[j]){
			arr3->A[k++] = A[i++];
		}
		else if(arr2.A[j] < A[i]){
			arr3->A[k++] = arr2.A[j++];
		}
		else{
			arr3->A[k++] = A[i++];
			j++;
		}
	}
	
	for(; i<lenght; i++){
		arr3->A[k++] = A[i];
	}
	for(; j<arr2.lenght; j++){
		arr3->A[k++] = arr2.A[j];
	}
	
	arr3->lenght = k;
	
	return arr3;
}

Array* Intersection(Array *arr2){
	int i = 0;
	int j = 0;
	int k = 0;
	
	Array *arr3 = new Array(lenght+arr2.lenght);
	
	while(i<lenght && j<arr2.lenght){
		if(A[i] < arr2.A[j]){
			i++;
		}
		else if(arr2.A[j] < A[i]){
			j++;
		}
		else if([i] == arr2.A[j]){
			arr3->A[k++] = A[i++];
			j++;
		}
	}
		
	arr3->lenght = k;
	
	return arr3;
}

Array* Difference(Array *arr2){
	int i = 0;
	int j = 0;
	int k = 0;
	
	Array *arr3 = new Array(lenght+arr2.lenght);
	
	while(i<lenght && j<arr2.lenght){
		if(A[i] < arr2.A[j]){
			arr3->A[k++] = A[i++];
		}
		else if(arr2.A[j] < A[i]){
			j++;
		}
		else{
			i++;
			j++;
		}
	}
	
	for(; i<lenght; i++){
		arr3->A[k++] = A[i];
	}
	
	arr3->lenght = k;
	
	return arr3;
}

int main() {
	 Array *arr1;
	int choice;
	int x;
	int sz;
	int index;
	
	cout<<"Enter the size of the array that you want to create: "<<endl;
	cin>>sz;
	arr1 = new Array[sz];  //arr1.A = (int *)malloc(arr1.size*sizeof(int));
	cout<<endl;
	
	do{
	
	cout<<"------MENU------"<<endl<<endl;
	cout<<"0. Display"<<endl;
	cout<<"1. Append"<<endl;
	cout<<"2. Insert"<<endl;
	cout<<"3. Delete"<<endl;
	cout<<"4. Sum"<<endl;
	
  //cout<<"5. Max"<<endl;
  //cout<<"6. Min"<<endl;
  //cout<<"7. Avg"<<endl;
  //cout<<"8. Linear Search"<<endl;
  //cout<<"9. Binary Search"<<endl;
  //cout<<"10. Reverse the array"<<endl;
  //cout<<"11. Insert Sort"<<endl;
  //cout<<"12. Check if sorted"<<endl;
  //cout<<"13. Rearrange"<<endl;
  //cout<<"14.  Merge"<<endl;
  //cout<<"15. Union"<<endl;
  //cout<<"16. Intersection"<<endl;	
  //cout<<"17. Difference"<<endl;
	
	cout<<"20. Exit"<<endl<<endl;
	
	cout<<"Enter your choice: "<<endl;
	cin>>choice;
	
	switch(choice){
		case 0:
			arr1.display();
			break;
		case 1:
			cout<<"Enter the element that you want to append: ";
			cin>>x;
			arr1.append(x);
			arr1.display();
			break;
		case 2:
			cout<<"Enter the element that you want to Insert: ";
			cin>>x;
			cout<<"Enter the index: ";
			cin>>index;
			arr1.insert(index, x);
			arr1.display();
			break;
		case 3:
			cout<<"At which index do you want to delete:";
			cin>>index;
			arr1.Delete(index);
			arr1.display();
			break;
		case 4:
			cout<<"The sum of the array is: "<<endl;
			cout<<arr1.Sum();
			
			break;	
	}

	}while(choice<20);
	
	return 0;	
}
