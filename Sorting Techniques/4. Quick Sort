/*
    0. Time Complexity: O(N^2)
        Min: O(N.logN) (Partitioning is always in the middle)
        Avg: O(N.logN)
        Max: O(N^2) (Partioning is always at an end)

    1. No. Of Comaprisons: O(N^2)
    2. No. Of Swaps: O(N)
    3. Adaptive: No
    4. Stable: No
    5. Extra Memory: No

*/

#include <iostream>

using namespace std;

void Swap(int* x, int* y) {
    int temp;
    temp = *x;
    *x = *y;
    *y = temp;

}

int Partition(int A[], int l, int h) {
    int pivot = A[l];
    int i = l;
    int j = h;

    do {
        do { i++; } while (A[i] <= pivot);
        do { j--; } while (A[j] > pivot);

        if (i < j)
            Swap(&A[i], &A[j]);
    }     
    while (i < j);

    Swap(&A[l], &A[j]);
    return j;
}

void QuickSort(int A[], int l, int h) {
    int j;
    if (l < h) {
        j = Partition(A, l, h);
        QuickSort(A, l, j);
        QuickSort(A, j+1, h);
    }
}

int main()
{
    int A[] = { 7,6,9,0,5,1,2,INT32_MAX };
    int n = 7;
    QuickSort(A, 0, 7);

    for (int k = 0; k < n; k++) {
        cout << A[k] << " ";
    }

}
