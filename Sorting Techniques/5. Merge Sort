/*
    0. Time Complexity: O(N.logN)
        Min: O(N.logN) 
        Max: O(N.logN) 

    1. No. Of Comaprisons: -   
    2. No. Of Swaps: -
    3. Adaptive: No
    4. Stable: Yes
    5. Extra Memory: No

*/

#include <iostream>

using namespace std;

void Merge(int A[], int low, int mid, int high) {
    int i = low;
    int j = mid + 1;
    int k = low;
    int B[100];
    while (i <= mid && j <= high) {
        if (A[i] < A[j]) {
            B[k++] = A[i++];
        }
        else {
            B[k++] = A[j++];
        }
    }
    while (i <= mid) {
        B[k++] = A[i++];
    }
    while (j <= high) {
        B[k++] = A[j++];
    }
    for (int i = low; i <= high; i++) {
        A[i] = B[i];
    }
}

void IMergeSort(int A[], int n) {
    int p;
    for (p = 2; p <= n; p = p * 2) {
        for (int i = 0; i + p - 1 < n; i = i + p) {
            int low = i;
            int high = i + p - 1;
            int mid = (low + high) / 2;
            Merge(A, low, mid, high);
        }
    }
    if (p / 2 < n) {
        Merge(A, 0, p / 2 - 1, n - 1);
    }
}

void RMergeSort(int A[], int low, int high) {
    int mid;

    if (low < high) {
        mid = (low + high) / 2;
        RMergeSort(A, low, mid);
        RMergeSort(A, mid + 1, high);
        Merge(A, low, mid, high);
    }
}

int main()
{
    int A[] = { 7,6,9,0,5,1,2,8 };
    int n = sizeof(A) / sizeof(A[0]);
    IMergeSort(A, n);

    for (int k = 0; k < n; k++) {
        cout << A[k] << " ";
    }
    cout << endl << endl;

    int B[] = { 7,6,9,0,5,1,2,8 };
    int m = sizeof(B) / sizeof(B[0]);
    RMergeSort(B, 0, m - 1);

    for (int k = 0; k < m; k++) {
        cout << B[k] << " ";
    }

}
