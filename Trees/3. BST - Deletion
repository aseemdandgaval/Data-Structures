#include <iostream>
#include <stdio.h>
#include <stdlib.h>


using namespace std;

class Node {
public:
	Node* lchild;
	Node* rchild;
	int data;

	//friend void insert(int key);  if you want to make the members as private
};
Node* root = NULL;

void Insert(int key) {
	Node* temp;					// temp is the head pointer
	Node* r = NULL;					// r is tailing pointer
	Node* p;					// p is the pointer to insert value

	temp = root;

	if (root == NULL) {
		p = new Node;
		p->data = key;
		p->lchild = p->rchild = NULL;
		root = p;
		return;
	}

	while (temp != NULL) {
		r = temp;

		if (key < temp->data) {
			temp = temp->lchild;
		}
		else if (key > temp->data) {
			temp = temp->rchild;
		}
		else {
			return;
		}
	}


	p = new Node;
	p->lchild = p->rchild = NULL;
	p->data = key;

	if (key < r->data){
		r->lchild = p;
	}
	else {
		r->rchild = p;
	}
}

void InOrder(Node* p) {
	if (p != NULL) {
		InOrder(p->lchild);
		cout << p->data<<" ";
		InOrder(p->rchild);
	}
}

Node* RInsert(Node* p, int key) {
	Node* temp;

	if (p == NULL) {
		temp = new Node;
		temp->data = key;
		temp->lchild = temp->rchild = NULL;
		return temp;
	}
	
	if (key < p->data) {
		p->lchild = RInsert(p->lchild, key);
	}
	else {
		p->rchild = RInsert(p->rchild, key);
	}
	return p;
}

Node* Search(int key) {
	Node* temp;
	temp = root;

	while (temp != NULL) {
		if (key == temp->data) {
			return temp;
		}
		else if (key < temp->data) {
			temp = temp->lchild;
		}
		else if (key > temp->data) {
			temp = temp->rchild;
		}
	}
	return NULL;
}

int Height(Node* p) {
	int x,y;

	if (p == NULL) {
		return 0;
	}
	else{
		x = Height(p->lchild);
		y = Height(p->rchild);
	}

	if (x > y)
		return x + 1;
	else
		return y + 1;

}

Node* InPre(Node* p) {
	while (p != NULL && p->rchild != NULL) {
		p = p->rchild;
	}
	return p;
}

Node* InSucc(Node* p) {
	while (p != NULL && p->lchild != NULL) {
		p = p->lchild;
	}
	return p;
}


Node* Delete(Node* p, int key) {
	Node* q;
	
	if (p == NULL) {
		return NULL;
	}

	if (p->rchild == NULL && p->lchild == NULL) {
		if (p == root) {
			root = NULL;
		}
		else {
			delete p;
			return NULL;
		}
	}

	if (key < p->data) {
		p->lchild = Delete(p->lchild, key);
	}
	else if (key > p->data) {
		p->rchild = Delete(p->rchild, key);
	}
	else {
				if (Height(p->lchild) > Height(p->rchild)) {
			q = InPre(p->lchild);
			p->data = q->data;
			p->lchild = Delete(p->lchild, q->data);
		}
		else {
			q = InSucc(p->rchild);
			p->data = q->data;
			p->rchild = Delete(p->rchild, q->data);
		}
	}
	return p;
}


int main() {
	Node* temp;

	root = RInsert(root,30);
	RInsert(root, 20);
	RInsert(root, 25);
	RInsert(root, 35);

	InOrder(root);
	cout << endl << endl;

	Delete(root, 25);

	InOrder(root);
	cout << endl << endl;

	temp = Search(25);
	if (temp != NULL) {
		cout << "Element is found." << endl << endl;
	}
	else {
		cout << "Element is not found." << endl << endl;
	}
	
} 
