#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

class Node {
public:
	Node* lchild;
	Node* rchild;
	int height;
	int data;

};
Node* root = NULL;

int NodeHeight(Node* p) {
	int hl;
	int hr;
	
	hl = p && p->lchild ? p->lchild->height : 0;
	hr = p && p->rchild ? p->rchild->height : 0;

	return hl > hr ? hl + 1 : hr + 1;
}

int Balancefactor(Node* p) {
	int hl;
	int hr;

	hl = p && p->lchild ? p->lchild->height : 0;
	hr = p && p->rchild ? p->rchild->height : 0;

	return hl - hr;
}

Node* LLRotation(Node* p) {
	Node* pl = p->lchild;
	Node* plr = pl->rchild;

	pl->rchild = p;
	p->lchild = plr;

	p->height = NodeHeight(p);
	pl->height = NodeHeight(pl);

	if (root == p) {
		root = pl;
	}

	return pl;
}

Node* RRRotation(Node* p) {
	Node* pr = p->rchild;
	Node* prl = pr->lchild;

	pr->lchild = p;
	p->rchild = prl;

	p->height = NodeHeight(p);
	pr->height = NodeHeight(pr);

	if (root == p) {
		root = pr;
	}

	return pr;
}

Node* LRRotation(Node* p) {
	Node* pl = p->lchild;
	Node* plr = pl->rchild;

	pl->rchild = plr->lchild;
	p->lchild = plr->rchild;

	plr->lchild = pl;
	plr->rchild = p;

	pl->height = NodeHeight(pl);
	p->height = NodeHeight(p);
	plr->height = NodeHeight(plr);
	
	if (root == p) {
		root = plr;
	}

	return plr;
}

Node* RLRotation(Node* p) {
	Node* pr = p->rchild;
	Node* prl = pr->lchild;

	pr->lchild = prl->rchild;
	p->rchild = prl->lchild;

	prl->lchild = p;
	prl->rchild = pr;

	pr->height = NodeHeight(pr);
	p->height = NodeHeight(p);
	prl->height = NodeHeight(prl);

	if (root == p) {
		root = prl;
	}

	return prl;
}

Node* RInsert(Node* p, int key) {
	Node* temp;

	if (p == NULL) {
		temp = new Node;
		temp->data = key;
		temp->height = 1;
		temp->lchild = temp->rchild = NULL;
		return temp;
	}
	
	if (key < p->data) {
		p->lchild = RInsert(p->lchild, key);
	}
	else {
		p->rchild = RInsert(p->rchild, key);
	}
	
	p->height = NodeHeight(p);

	if (Balancefactor(p) == 2 && Balancefactor(p->lchild) == 1) {
		return LLRotation(p);
	}
	else if (Balancefactor(p) == 2 && Balancefactor(p->lchild) == -1) {
		return LRRotation(p);
	}
	else if (Balancefactor(p) == -2 && Balancefactor(p->lchild) == -1) {
		return RRRotation(p);
	}
	else if (Balancefactor(p) == -2 && Balancefactor(p->lchild) == 1) {
		return RLRotation(p);
	}

	return p;
}


int main() {

	root = RInsert(root,50);
	RInsert(root, 10);
	RInsert(root, 20);
  
  // Put Breakpoint above and debug to see AVL Trees that have rotated by chekcing root and lchild & rchilds.
  
  }
  
